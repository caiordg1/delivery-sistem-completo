// src/index.js
require('dotenv').config();
const Pino = require('pino');
const qrcode = require('qrcode-terminal');
const {
  default: makeWASocket,
  useMultiFileAuthState,
  DisconnectReason
} = require('@whiskeysockets/baileys');
const { getMenuText } = require('./flows/menu');
const { handleOrder, states: orderStates } = require('./flows/order');
const SatisfactionFlow = require('./flows/satisfactionFlow');

// Instanciar o fluxo de satisfa√ß√£o
const satisfactionFlow = new SatisfactionFlow();

async function startBot () {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info');
  const sock = makeWASocket({
    logger: Pino({ level: 'silent' }),
    auth: state
  });
  
  // Salva sess√£o
  sock.ev.on('creds.update', saveCreds);
  
  // QR & conex√£o
  sock.ev.on('connection.update', ({ connection, lastDisconnect, qr }) => {
    if (qr) qrcode.generate(qr, { small: false });
    if (connection === 'open') {
      console.log('‚úÖ Bot conectado com sucesso!');
    } else if (connection === 'close') {
      const shouldReconnect =
        (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
      console.log(
        '‚ùå Conex√£o fechada.',
        shouldReconnect ? 'Tentando reconectar‚Ä¶' : 'Logout detectado.'
      );
      if (shouldReconnect) startBot();
    }
  });
  
  // Mensagens
  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message || msg.key.fromMe) return;
    
    const chatId = msg.key.remoteJid;
    const userPhone = chatId.replace('@s.whatsapp.net', '');
    const texto = (
      msg.message.conversation ||
      msg.message.extendedTextMessage?.text ||
      ''
    ).trim().toLowerCase();
    
    // --- PRIORIDADE 1: Verificar se est√° no fluxo de satisfa√ß√£o ---
    if (satisfactionFlow.isUserInSatisfactionFlow(userPhone)) {
      const handled = await satisfactionFlow.handleSatisfactionFlow(sock, chatId, texto, userPhone);
      if (handled) return;
    }
    
    // --- PRIORIDADE 2: Se estiver no meio de um pedido ---
    if (orderStates.has(chatId)) {
      await handleOrder(sock, msg, texto);
      return;
    }
    
    // --- Menu / sauda√ß√£o ---
    if (['oi', 'ola', 'ol√°', 'menu', 'bom dia', 'boa tarde', 'boa noite'].includes(texto)) {
      await sock.sendMessage(chatId, { text: getMenuText() });
      return;
    }
    
    // --- Op√ß√£o 1: Card√°pio ---
    if (texto === '1') {
      const { getFormattedMenu } = require('./flows/cardapio');
      const menuText = await getFormattedMenu();
      await sock.sendMessage(chatId, { text: menuText });
      return;
    }
    
    // --- Op√ß√£o 2: Iniciar fluxo de pedido ---
    if (texto === '2') {
      await handleOrder(sock, msg, '');     // pergunta o nome
      return;
    }
    
    // --- Op√ß√£o 3: Atendente humano ---
    if (texto === '3') {
      await sock.sendMessage(chatId, {
        text: 'üìû Ok! Um atendente humano continuar√° esta conversa em instantes.'
      });
      return;
    }
    
    // --- Fallback ---
    await sock.sendMessage(chatId, {
      text: 'Desculpe, n√£o entendi. Digite *menu* para ver as op√ß√µes.'
    });
  });

  // Disponibilizar sock globalmente para chamadas externas
  global.whatsappSock = sock;
  global.satisfactionFlow = satisfactionFlow;
}

startBot();
