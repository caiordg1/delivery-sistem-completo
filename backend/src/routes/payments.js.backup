const express = require('express');
const router = express.Router();
const paymentService = require('../services/paymentService');

// Modelo Order simulado (já que não temos MongoDB conectado)
const Order = {
  findByIdAndUpdate: async (id, updateData) => {
    console.log('Atualizando pedido:', id, updateData);
    return { _id: id, ...updateData };
  },
  updateOne: async (filter, updateData) => {
    console.log('Atualizando pedido com filtro:', filter, updateData);
    return { acknowledged: true };
  }
};

// CRIAR PAGAMENTO PIX (MERCADO PAGO)
router.post('/mercadopago/pix', async (req, res) => {
  try {
    const { orderId, customerName, customerEmail, customerCPF, total } = req.body;

    console.log('Recebido pedido de PIX:', { orderId, customerName, total });

    const paymentData = {
      orderId,
      customerName,
      customerEmail,
      customerCPF,
      total: parseFloat(total)
    };

    const result = await paymentService.createMercadoPagoPix(paymentData);

    if (result.success) {
      console.log('PIX criado com sucesso:', result.payment_id);

      res.json({
        success: true,
        payment_id: result.payment_id,
        qr_code: result.qr_code,
        qr_code_base64: result.qr_code_base64
      });
    } else {
      console.error('Erro ao criar PIX:', result.error);
      res.status(400).json({ success: false, error: result.error });
    }
  } catch (error) {
    console.error('Erro na rota PIX:', error);
    res.status(500).json({ success: false, error: 'Erro interno do servidor' });
  }
});

// CRIAR PAGAMENTO CARTÃO (MERCADO PAGO)
router.post('/mercadopago/card', async (req, res) => {
  try {
    const { orderId, customerName, customerEmail, total, cardData } = req.body;

    const paymentData = {
      orderId,
      customerName,
      customerEmail,
      total: parseFloat(total)
    };

    const result = await paymentService.createMercadoPagoCard(paymentData, cardData);

    if (result.success) {
      res.json({
        success: true,
        payment_id: result.payment_id,
        status: result.status
      });
    } else {
      res.status(400).json({ success: false, error: result.error });
    }
  } catch (error) {
    console.error('Erro na rota Cartão:', error);
    res.status(500).json({ success: false, error: 'Erro interno do servidor' });
  }
});

// VERIFICAR STATUS DO PAGAMENTO
router.get('/status/:provider/:paymentId', async (req, res) => {
  try {
    const { provider, paymentId } = req.params;

    const result = await paymentService.checkPaymentStatus(paymentId, provider);

    if (result.success) {
      res.json({
        success: true,
        status: result.status,
        provider: result.provider
      });
    } else {
      res.status(400).json({ success: false, error: result.error });
    }
  } catch (error) {
    console.error('Erro ao verificar status:', error);
    res.status(500).json({ success: false, error: 'Erro interno do servidor' });
  }
});

// WEBHOOK MERCADO PAGO
router.post('/mercadopago/webhook', async (req, res) => {
  try {
    const { data, type } = req.body;
    console.log('Webhook MercadoPago recebido:', { type, data });

    if (type === 'payment') {
      const paymentId = data.id;
      const result = await paymentService.checkPaymentStatus(paymentId, 'mercadopago');

      if (result.success && result.status === 'approved') {
        console.log('Pagamento aprovado:', paymentId);
      }
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('Erro webhook MercadoPago:', error);
    res.status(500).json({ success: false });
  }
});

module.exports = router;
