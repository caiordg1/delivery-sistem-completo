import React, { useState, useEffect } from 'react';

const Satisfaction = () => {
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [feedbacks, setFeedbacks] = useState([]);
  const [stats, setStats] = useState({});
  const [filters, setFilters] = useState({
    rating: 'all',
    category: 'all',
    status: 'all',
    period: '30'
  });

  // Dados simulados
  const mockStats = {
    general: {
      totalFeedbacks: 156,
      averageRating: 4.3,
      averageDeliveryTime: 32,
      satisfactionRate: 87.2
    },
    ratingDistribution: {
      5: 68,
      4: 42,
      3: 28,
      2: 12,
      1: 6
    },
    alerts: {
      pendingNegativeFeedbacks: 8
    }
  };

  const mockFeedbacks = [
    {
      id: 1,
      customerName: 'Jo√£o Silva',
      customerPhone: '11999999999',
      rating: 5,
      comment: 'Excelente atendimento! Entrega muito r√°pida e comida deliciosa.',
      category: 'delivery',
      orderValue: 85.50,
      deliveryTime: 25,
      status: 'pending',
      createdAt: '2025-06-15T18:30:00Z',
      orderId: { orderNumber: '#12345' }
    },
    {
      id: 2,
      customerName: 'Maria Santos',
      customerPhone: '11888888888',
      rating: 2,
      comment: 'Pedido chegou frio e com mais de 1 hora de atraso.',
      category: 'delivery',
      orderValue: 62.00,
      deliveryTime: 75,
      status: 'pending',
      createdAt: '2025-06-15T17:45:00Z',
      orderId: { orderNumber: '#12344' }
    },
    {
      id: 3,
      customerName: 'Pedro Costa',
      customerPhone: '11777777777',
      rating: 4,
      comment: 'Boa comida, mas poderia melhorar a embalagem.',
      category: 'product',
      orderValue: 45.80,
      deliveryTime: 28,
      status: 'responded',
      response: 'Obrigado pelo feedback! Estamos trabalhando para melhorar nossas embalagens.',
      respondedBy: 'Admin',
      createdAt: '2025-06-15T16:20:00Z',
      orderId: { orderNumber: '#12343' }
    }
  ];

  useEffect(() => {
    setTimeout(() => {
      setStats(mockStats);
      setFeedbacks(mockFeedbacks);
      setLoading(false);
    }, 1000);
  }, [filters]);

  const formatDateTime = (dateString) => {
    return new Date(dateString).toLocaleString('pt-BR');
  };

  const getStarDisplay = (rating) => {
    return '‚≠ê'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
  };

  const getRatingColor = (rating) => {
    if (rating >= 4) return 'text-green-600 bg-green-50';
    if (rating >= 3) return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'text-orange-600 bg-orange-50';
      case 'responded': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Satisfa√ß√£o do Cliente</h1>
          <p className="text-gray-600">Monitoramento de feedbacks e avalia√ß√µes</p>
        </div>
        {stats.alerts?.pendingNegativeFeedbacks > 0 && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <div className="flex items-center">
              <span className="text-red-600 text-xl mr-2">‚ö†Ô∏è</span>
              <div>
                <p className="text-red-800 font-medium">Aten√ß√£o Necess√°ria</p>
                <p className="text-red-600 text-sm">
                  {stats.alerts.pendingNegativeFeedbacks} feedbacks negativos precisam de resposta
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Cards de Estat√≠sticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <span className="text-blue-600 text-2xl">‚≠ê</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Avalia√ß√£o M√©dia</p>
              <p className="text-2xl font-bold text-gray-900">
                {stats.general?.averageRating?.toFixed(1) || 0}
              </p>
              <p className="text-sm text-blue-600">
                {getStarDisplay(Math.round(stats.general?.averageRating || 0))}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <span className="text-green-600 text-2xl">üòä</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Taxa de Satisfa√ß√£o</p>
              <p className="text-2xl font-bold text-gray-900">
                {stats.general?.satisfactionRate?.toFixed(1) || 0}%
              </p>
              <p className="text-sm text-green-600">Avalia√ß√µes 4+ estrelas</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 rounded-lg">
              <span className="text-purple-600 text-2xl">üìù</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Total Feedbacks</p>
              <p className="text-2xl font-bold text-gray-900">
                {stats.general?.totalFeedbacks || 0}
              </p>
              <p className="text-sm text-purple-600">√öltimos 30 dias</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center">
            <div className="p-2 bg-orange-100 rounded-lg">
              <span className="text-orange-600 text-2xl">üöö</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Tempo M√©dio</p>
              <p className="text-2xl font-bold text-gray-900">
                {stats.general?.averageDeliveryTime || 0}min
              </p>
              <p className="text-sm text-orange-600">Tempo de entrega</p>
            </div>
          </div>
        </div>
      </div>

      {/* Distribui√ß√£o de Avalia√ß√µes */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium mb-4">Distribui√ß√£o de Avalia√ß√µes</h3>
        <div className="space-y-3">
          {[5, 4, 3, 2, 1].map((rating) => {
            const count = stats.ratingDistribution?.[rating] || 0;
            const total = stats.general?.totalFeedbacks || 1;
            const percentage = ((count / total) * 100).toFixed(1);
            
            return (
              <div key={rating} className="flex items-center space-x-3">
                <span className="w-16 text-sm">{rating} ‚≠ê</span>
                <div className="flex-1 bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-blue-600 h-2 rounded-full"
                    style={{ width: `${percentage}%` }}
                  ></div>
                </div>
                <span className="w-12 text-sm text-gray-600">{count}</span>
                <span className="w-12 text-sm text-gray-500">{percentage}%</span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white rounded-lg shadow p-4">
        <div className="flex flex-wrap gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Avalia√ß√£o
            </label>
            <select
              value={filters.rating}
              onChange={(e) => setFilters({...filters, rating: e.target.value})}
              className="border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">Todas</option>
              <option value="5">5 ‚≠ê</option>
              <option value="4">4 ‚≠ê</option>
              <option value="3">3 ‚≠ê</option>
              <option value="2">2 ‚≠ê</option>
              <option value="1">1 ‚≠ê</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Categoria
            </label>
            <select
              value={filters.category}
              onChange={(e) => setFilters({...filters, category: e.target.value})}
              className="border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">Todas</option>
              <option value="delivery">Entrega</option>
              <option value="product">Produto</option>
              <option value="service">Atendimento</option>
              <option value="general">Geral</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Status
            </label>
            <select
              value={filters.status}
              onChange={(e) => setFilters({...filters, status: e.target.value})}
              className="border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">Todos</option>
              <option value="pending">Pendente</option>
              <option value="responded">Respondido</option>
            </select>
          </div>
        </div>
      </div>

      {/* Lista de Feedbacks */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium">Feedbacks Recentes ({feedbacks.length})</h3>
        </div>
        <div className="divide-y divide-gray-200">
          {feedbacks.map((feedback) => (
            <div key={feedback.id} className="p-6">
              <div className="flex justify-between items-start mb-3">
                <div className="flex items-center space-x-3">
                  <div className="flex-shrink-0">
                    <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                      <span className="text-gray-600 font-medium">
                        {feedback.customerName.charAt(0)}
                      </span>
                    </div>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">{feedback.customerName}</p>
                    <p className="text-sm text-gray-500">
                      Pedido {feedback.orderId?.orderNumber} ‚Ä¢ {formatDateTime(feedback.createdAt)}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRatingColor(feedback.rating)}`}>
                    {getStarDisplay(feedback.rating)}
                  </span>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(feedback.status)}`}>
                    {feedback.status === 'pending' ? 'Pendente' : 'Respondido'}
                  </span>
                </div>
              </div>

              <div className="mb-3">
                <p className="text-gray-700">{feedback.comment}</p>
              </div>

              <div className="flex items-center justify-between text-sm text-gray-500 mb-3">
                <span>Categoria: {feedback.category}</span>
                <span>Valor: R$ {feedback.orderValue?.toFixed(2)}</span>
                <span>Entrega: {feedback.deliveryTime}min</span>
              </div>

              {feedback.status === 'responded' && feedback.response && (
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="text-sm font-medium text-gray-700 mb-1">
                    Resposta da empresa:
                  </p>
                  <p className="text-sm text-gray-600">{feedback.response}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    Respondido por {feedback.respondedBy}
                  </p>
                </div>
              )}

              {feedback.status === 'pending' && feedback.rating <= 3 && (
                <div className="flex space-x-2">
                  <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm">
                    Responder
                  </button>
                  <button className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded text-sm">
                    Marcar como Lido
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>

        {feedbacks.length === 0 && (
          <div className="text-center py-8">
            <p className="text-gray-500">Nenhum feedback encontrado para os filtros selecionados.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Satisfaction;
