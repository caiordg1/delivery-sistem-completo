import React, { useState, useEffect } from 'react';
import { DragDropContext } from 'react-beautiful-dnd';
import toast from 'react-hot-toast';

const KanbanBoard = () => {
  const [orders, setOrders] = useState({
    recebido: [],
    em_preparo: [],
    aguardando_entregador: [],
    saiu_para_entrega: [],
    entregue: []
  });
  
  const [isLoading, setIsLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(new Date());

  const loadKanbanData = async () => {
    try {
      setIsLoading(true);
      
      // Buscar dados do backend
      const response = await fetch('/api/orders/kanban/data', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setOrders(data);
        setLastUpdate(new Date());
        
        const totalPedidos = Object.values(data).reduce((total, column) => total + column.length, 0);
        console.log(`Kanban atualizado: ${totalPedidos} pedidos carregados`);
        
        if (totalPedidos > 0) {
          toast.success(`✅ ${totalPedidos} pedidos carregados!`);
        }
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      console.error('Erro ao carregar Kanban:', error);
      toast.error('Erro ao carregar pedidos do bot');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadKanbanData();
    
    // Auto-refresh a cada 30 segundos
    const interval = setInterval(loadKanbanData, 30000);
    
    return () => clearInterval(interval);
  }, []);

  const updateOrderStatus = async (orderId, newStatus, oldStatus) => {
    try {
      const response = await fetch(`/api/orders/${orderId}/status`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: newStatus,
          user: 'Admin Kanban',
          observation: `Movido de ${oldStatus} para ${newStatus} via Kanban`
        })
      });

      if (response.ok) {
        toast.success(`✅ Status alterado: ${newStatus.replace('_', ' ')}`);
        loadKanbanData(); // Recarregar dados
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      toast.error('❌ Erro ao atualizar status');
    }
  };

  const onDragEnd = async (result) => {
    const { destination, source, draggableId } = result;
    
    if (!destination) return;
    if (destination.droppableId === source.droppableId && 
        destination.index === source.index) return;

    const orderId = draggableId;
    const oldStatus = source.droppableId;
    const newStatus = destination.droppableId;

    // Atualização otimista da UI
    moveOrderBetweenColumns(orderId, oldStatus, newStatus);
    
    // Atualizar no backend
    await updateOrderStatus(orderId, newStatus, oldStatus);
  };

  const moveOrderBetweenColumns = (orderId, fromStatus, toStatus) => {
    setOrders(prev => {
      const order = prev[fromStatus]?.find(o => o._id === orderId);
      if (!order) return prev;

      return {
        ...prev,
        [fromStatus]: prev[fromStatus].filter(o => o._id !== orderId),
        [toStatus]: [...(prev[toStatus] || []), { ...order, status: toStatus }]
      };
    });
  };

  const renderOrderCard = (order) => (
    <div 
      key={order._id} 
      className="bg-white p-3 mb-3 rounded-lg shadow-sm border-l-4 border-blue-400 hover:shadow-md transition-shadow cursor-pointer"
      onClick={() => toast.info(`📋 Pedido #${order.orderNumber || order._id.slice(-6)} - ${order.customerName}`)}
    >
      {/* Header do Card */}
      <div className="flex justify-between items-start mb-2">
        <div className="font-bold text-gray-800">
          #{order.orderNumber || order._id.slice(-6)}
        </div>
        <div className="font-bold text-green-600">
          R$ {order.total?.toFixed(2) || '0.00'}
        </div>
      </div>
      
      {/* Dados do Cliente */}
      <div className="text-sm text-gray-600 mb-2">
        👤 {order.customerName || 'Cliente não informado'}
      </div>
      
      {/* Telefone se disponível */}
      {order.customerPhone && (
        <div className="text-xs text-gray-500 mb-1">
          📞 {order.customerPhone}
        </div>
      )}
      
      {/* Endereço se disponível */}
      {order.customerAddress && (
        <div className="text-xs text-gray-500 mb-2 truncate">
          📍 {order.customerAddress}
        </div>
      )}
      
      {/* Footer com Data/Hora */}
      <div className="flex justify-between items-center pt-2 border-t border-gray-100">
        <div className="text-xs text-gray-500">
          📅 {new Date(order.createdAt).toLocaleDateString('pt-BR')}
        </div>
        <div className="text-xs text-gray-500">
          ⏰ {new Date(order.createdAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}
        </div>
      </div>
      
      {/* Itens do Pedido */}
      {order.items && order.items.length > 0 && (
        <div className="text-xs text-blue-600 mt-1">
          🛍️ {order.items.length} {order.items.length === 1 ? 'item' : 'itens'}
        </div>
      )}
    </div>
  );

  const renderColumn = (status, title, color, ordersList) => (
    <div className={`bg-${color}-50 border-2 border-${color}-200 rounded-lg min-h-96`}>
      {/* Header da Coluna */}
      <div className={`bg-${color}-500 text-white p-4 rounded-t-lg`}>
        <div className="flex justify-between items-center">
          <h3 className="font-bold text-lg">{title}</h3>
          <span className="bg-white bg-opacity-30 px-3 py-1 rounded-full text-sm font-bold">
            {ordersList.length}
          </span>
        </div>
        
        {ordersList.length > 0 && (
          <div className="mt-2 text-sm opacity-90">
            💰 Total: R$ {ordersList.reduce((sum, order) => sum + (order.total || 0), 0).toFixed(2)}
          </div>
        )}
      </div>

      {/* Conteúdo da Coluna */}
      <div className="p-4" data-droppable-id={status}>
        {ordersList.length > 0 ? (
          <div>
            {ordersList.map(renderOrderCard)}
          </div>
        ) : (
          <div className="text-center text-gray-500 py-12">
            <div className="text-6xl mb-4 opacity-50">
              {status === 'recebido' && '📥'}
              {status === 'em_preparo' && '👨‍🍳'}
              {status === 'aguardando_entregador' && '📦'}
              {status === 'saiu_para_entrega' && '🚚'}
              {status === 'entregue' && '✅'}
            </div>
            <p className="font-medium">Nenhum pedido</p>
            <p className="text-sm">
              {status === 'recebido' && 'Aguardando novos pedidos do bot...'}
              {status === 'em_preparo' && 'Nenhum pedido sendo preparado'}
              {status === 'aguardando_entregador' && 'Nenhum pedido pronto'}
              {status === 'saiu_para_entrega' && 'Nenhum pedido em entrega'}
              {status === 'entregue' && 'Nenhum pedido entregue hoje'}
            </p>
          </div>
        )}
      </div>
    </div>
  );

  const totalPedidos = Object.values(orders).reduce((total, column) => total + column.length, 0);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">
              Dashboard Kanban - Pedidos do Bot WhatsApp 🤖
            </h1>
            <p className="text-gray-600">
              {totalPedidos} pedidos • Última atualização: {lastUpdate.toLocaleTimeString('pt-BR')}
              {isLoading && <span className="ml-2">⏳ Carregando...</span>}
            </p>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={loadKanbanData}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2"
              disabled={isLoading}
            >
              <span>🔄</span>
              <span>{isLoading ? 'Carregando...' : 'Atualizar'}</span>
            </button>
          </div>
        </div>
      </div>

      {/* Kanban Board */}
      <DragDropContext onDragEnd={onDragEnd}>
        <div className="grid grid-cols-5 gap-6">
          {renderColumn('recebido', '📥 Recebidos', 'blue', orders.recebido || [])}
          {renderColumn('em_preparo', '👨‍🍳 Em Preparo', 'yellow', orders.em_preparo || [])}
          {renderColumn('aguardando_entregador', '📦 Prontos', 'purple', orders.aguardando_entregador || [])}
          {renderColumn('saiu_para_entrega', '🚚 Em Entrega', 'orange', orders.saiu_para_entrega || [])}
          {renderColumn('entregue', '✅ Entregues', 'green', orders.entregue || [])}
        </div>
      </DragDropContext>
      
      {/* Footer com Informações */}
      <div className="mt-8 text-center text-gray-500 text-sm">
        <p>🔄 Atualização automática a cada 30 segundos</p>
        <p>📱 Integrado com Bot WhatsApp • 🎯 Drag & Drop para alterar status</p>
      </div>
    </div>
  );
};

export default KanbanBoard;
