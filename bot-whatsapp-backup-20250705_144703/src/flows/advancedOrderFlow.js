// /bot-whatsapp/src/flows/advancedOrderFlow.js
// Fluxo Avan√ßado de Pedidos - P√≥s Card√°pio Digital

const StateManager = require('../services/stateManager');
const apiService = require('../services/apiService');
const validationService = require('../services/validationService');
const paymentService = require('../services/paymentService');

class AdvancedOrderFlow {
    constructor(stateManager, whatsappService) {
        this.stateManager = stateManager;
        this.whatsapp = whatsappService;
        this.maxRetries = 3;
    }

    /**
     * Processa mensagem baseada no estado atual do usu√°rio
     */
    async processMessage(phoneNumber, message, messageType = 'text') {
        try {
            const currentState = this.stateManager.getUserState(phoneNumber);
            const context = this.stateManager.getUserContext(phoneNumber);

            // Log da intera√ß√£o
            console.log(`[BOT] ${phoneNumber} - Estado: ${currentState} - Mensagem: ${message}`);

            // Comandos globais que funcionam em qualquer estado
            if (await this.handleGlobalCommands(phoneNumber, message)) {
                return;
            }

            // Roteamento baseado no estado
            switch (currentState) {
                case StateManager.STATES.IDLE:
                    await this.handleIdleState(phoneNumber, message);
                    break;

                case StateManager.STATES.CONFIRMING_ORDER:
                    await this.handleOrderConfirmation(phoneNumber, message);
                    break;

                case StateManager.STATES.PROVIDING_DETAILS:
                    await this.handlePersonalDetails(phoneNumber, message);
                    break;

                case StateManager.STATES.CONFIRMING_ADDRESS:
                    await this.handleAddressConfirmation(phoneNumber, message);
                    break;

                case StateManager.STATES.SELECTING_PAYMENT:
                    await this.handlePaymentSelection(phoneNumber, message);
                    break;

                case StateManager.STATES.WAITING_PAYMENT:
                    await this.handlePaymentStatus(phoneNumber, message);
                    break;

                case StateManager.STATES.TRACKING_ORDER:
                    await this.handleOrderTracking(phoneNumber, message);
                    break;

                case StateManager.STATES.CUSTOMER_SUPPORT:
                    await this.handleCustomerSupport(phoneNumber, message);
                    break;

                case StateManager.STATES.EDITING_ORDER:
                    await this.handleOrderEditing(phoneNumber, message);
                    break;

                default:
                    await this.handleUnknownState(phoneNumber, message);
            }

        } catch (error) {
            console.error('[BOT ERROR]', error);
            await this.sendErrorMessage(phoneNumber, error);
        }
    }

    /**
     * Manipula comandos globais (funcionam em qualquer estado)
     */
    async handleGlobalCommands(phoneNumber, message) {
        const lowerMessage = message.toLowerCase().trim();

        // Comandos de cancelamento
        if (['cancelar', 'cancel', 'sair', 'parar', 'pare'].includes(lowerMessage)) {
            await this.cancelCurrentFlow(phoneNumber);
            return true;
        }

        // Comandos de ajuda
        if (['ajuda', 'help', 'menu', 'op√ß√µes', 'opcoes'].includes(lowerMessage)) {
            await this.showHelpMenu(phoneNumber);
            return true;
        }

        // Comando de status do pedido
        if (['status', 'pedido', 'meu pedido'].includes(lowerMessage)) {
            await this.showOrderStatus(phoneNumber);
            return true;
        }

        // Comando para falar com atendente
        if (['atendente', 'humano', 'suporte', 'reclama√ß√£o', 'problema'].includes(lowerMessage)) {
            await this.transferToSupport(phoneNumber);
            return true;
        }

        return false;
    }

    /**
     * Estado IDLE - Aguardando intera√ß√£o
     */
    async handleIdleState(phoneNumber, message) {
        // Verifica se a mensagem √© um resumo de pedido do card√°pio
        if (await this.isOrderSummaryFromMenu(message)) {
            await this.processOrderFromMenu(phoneNumber, message);
        } else {
            await this.showMainMenu(phoneNumber);
        }
    }

    /**
     * Processa pedido vindo do card√°pio digital
     */
    async processOrderFromMenu(phoneNumber, orderSummary) {
        try {
            // Extrai dados do pedido do resumo
            const orderData = await this.parseOrderSummary(orderSummary);
            
            if (!orderData) {
                await this.sendMessage(phoneNumber, 
                    "‚ùå N√£o consegui processar seu pedido. Por favor, tente novamente pelo card√°pio digital.");
                return;
            }

            // Salva dados do pedido no contexto
            this.stateManager.updateState(phoneNumber, StateManager.STATES.CONFIRMING_ORDER, {
                [StateManager.CONTEXT_TYPES.ORDER_DATA]: orderData
            });

            // Exibe resumo formatado e pede confirma√ß√£o
            await this.showOrderConfirmation(phoneNumber, orderData);

        } catch (error) {
            console.error('[ORDER FROM MENU ERROR]', error);
            await this.sendMessage(phoneNumber, 
                "‚ùå Ocorreu um erro ao processar seu pedido. Tente novamente em alguns instantes.");
        }
    }

    /**
     * Exibe confirma√ß√£o do pedido
     */
    async showOrderConfirmation(phoneNumber, orderData) {
        let message = "üõí *CONFIRMA√á√ÉO DO SEU PEDIDO*\n\n";
        
        // Lista os itens
        message += "üìã *Itens do pedido:*\n";
        orderData.items.forEach((item, index) => {
            message += `${index + 1}. ${item.name}\n`;
            message += `   Qtd: ${item.quantity} | R$ ${item.price.toFixed(2)}\n`;
            if (item.observations) {
                message += `   üìù ${item.observations}\n`;
            }
            message += "\n";
        });

        // Totais
        message += `üí∞ *Subtotal:* R$ ${orderData.subtotal.toFixed(2)}\n`;
        if (orderData.deliveryFee) {
            message += `üöö *Taxa de entrega:* R$ ${orderData.deliveryFee.toFixed(2)}\n`;
        }
        message += `üíµ *TOTAL:* R$ ${orderData.total.toFixed(2)}\n\n`;

        message += "‚úÖ Confirma este pedido?\n\n";
        message += "Digite:\n";
        message += "‚Ä¢ *1* - Confirmar pedido\n";
        message += "‚Ä¢ *2* - Editar pedido\n";
        message += "‚Ä¢ *3* - Cancelar pedido";

        await this.sendMessage(phoneNumber, message);
    }

    /**
     * Manipula confirma√ß√£o do pedido
     */
    async handleOrderConfirmation(phoneNumber, message) {
        const option = message.trim();

        switch (option) {
            case '1':
                await this.proceedToPersonalDetails(phoneNumber);
                break;
            case '2':
                await this.enterEditMode(phoneNumber);
                break;
            case '3':
                await this.cancelOrder(phoneNumber);
                break;
            default:
                await this.handleInvalidOption(phoneNumber, 'confirmation');
        }
    }

    /**
     * Coleta dados pessoais do cliente
     */
    async proceedToPersonalDetails(phoneNumber) {
        // Verifica se j√° tem dados pessoais salvos
        const context = this.stateManager.getUserContext(phoneNumber);
        const personalInfo = context[StateManager.CONTEXT_TYPES.PERSONAL_INFO];

        if (personalInfo && personalInfo.name && personalInfo.email) {
            // J√° tem dados, pula para endere√ßo
            await this.proceedToAddressConfirmation(phoneNumber);
        } else {
            // Precisa coletar dados
            this.stateManager.updateState(phoneNumber, StateManager.STATES.PROVIDING_DETAILS);
            
            await this.sendMessage(phoneNumber, 
                "üë§ *DADOS PESSOAIS*\n\n" +
                "Para finalizar seu pedido, preciso de algumas informa√ß√µes:\n\n" +
                "Por favor, me informe seu *nome completo*:"
            );
        }
    }

    /**
     * Manipula coleta de dados pessoais
     */
    async handlePersonalDetails(phoneNumber, message) {
        const context = this.stateManager.getUserContext(phoneNumber);
        const personalInfo = context[StateManager.CONTEXT_TYPES.PERSONAL_INFO] || {};

        if (!personalInfo.name) {
            // Coletando nome
            if (validationService.isValidName(message)) {
                personalInfo.name = message.trim();
                this.stateManager.updateContext(phoneNumber, {
                    [StateManager.CONTEXT_TYPES.PERSONAL_INFO]: personalInfo
                });

                await this.sendMessage(phoneNumber, 
                    `Obrigado, *${personalInfo.name}*! üòä\n\n` +
                    "Agora preciso do seu *e-mail* para enviar a confirma√ß√£o do pedido:"
                );
            } else {
                await this.sendMessage(phoneNumber, 
                    "‚ùå Por favor, digite um nome v√°lido (m√≠nimo 2 caracteres):");
            }
        } else if (!personalInfo.email) {
            // Coletando e-mail
            if (validationService.isValidEmail(message)) {
                personalInfo.email = message.trim().toLowerCase();
                this.stateManager.updateContext(phoneNumber, {
                    [StateManager.CONTEXT_TYPES.PERSONAL_INFO]: personalInfo
                });

                await this.sendMessage(phoneNumber, 
                    "‚úÖ E-mail registrado com sucesso!\n\n" +
                    "Agora vamos confirmar o endere√ßo de entrega..."
                );

                // Avan√ßa para endere√ßo
                await this.proceedToAddressConfirmation(phoneNumber);
            } else {
                await this.sendMessage(phoneNumber, 
                    "‚ùå E-mail inv√°lido. Por favor, digite um e-mail v√°lido:");
            }
        }
    }

    /**
     * Confirma endere√ßo de entrega
     */
    async proceedToAddressConfirmation(phoneNumber) {
        this.stateManager.updateState(phoneNumber, StateManager.STATES.CONFIRMING_ADDRESS);

        await this.sendMessage(phoneNumber, 
            "üìç *ENDERE√áO DE ENTREGA*\n\n" +
            "Por favor, me informe seu endere√ßo completo:\n\n" +
            "üìù *Formato:*\n" +
            "Rua/Avenida, N√∫mero\n" +
            "Bairro, Cidade\n" +
            "CEP: 00000-000\n" +
            "Complemento (se houver)\n\n" +
            "*Exemplo:*\n" +
            "Rua das Flores, 123\n" +
            "Centro, S√£o Paulo\n" +
            "CEP: 01234-567\n" +
            "Apto 45"
        );
    }

    /**
     * Manipula confirma√ß√£o de endere√ßo
     */
    async handleAddressConfirmation(phoneNumber, message) {
        const addressData = validationService.parseAddress(message);

        if (addressData.isValid) {
            // Calcula taxa de entrega
            const deliveryFee = await this.calculateDeliveryFee(addressData);
            
            // Salva endere√ßo e taxa
            this.stateManager.updateContext(phoneNumber, {
                [StateManager.CONTEXT_TYPES.ADDRESS_INFO]: {
                    ...addressData,
                    deliveryFee
                }
            });

            // Atualiza total do pedido
            await this.updateOrderTotal(phoneNumber, deliveryFee);

            // Mostra resumo e pede confirma√ß√£o
            await this.showAddressConfirmation(phoneNumber, addressData, deliveryFee);
        } else {
            const retryCount = this.stateManager.incrementRetry(phoneNumber);
            
            if (retryCount <= this.maxRetries) {
                await this.sendMessage(phoneNumber, 
                    "‚ùå Endere√ßo incompleto ou inv√°lido.\n\n" +
                    "Por favor, informe o endere√ßo completo com:\n" +
                    "‚Ä¢ Rua e n√∫mero\n" +
                    "‚Ä¢ Bairro e cidade\n" +
                    "‚Ä¢ CEP\n\n" +
                    `Tentativa ${retryCount}/${this.maxRetries}`
                );
            } else {
                await this.transferToSupport(phoneNumber, 
                    "Muitas tentativas de endere√ßo inv√°lido. Transferindo para atendente...");
            }
        }
    }

    /**
     * Exibe confirma√ß√£o de endere√ßo
     */
    async showAddressConfirmation(phoneNumber, addressData, deliveryFee) {
        let message = "üìç *CONFIRMA√á√ÉO DE ENDERE√áO*\n\n";
        message += `üìß *Endere√ßo:*\n${addressData.fullAddress}\n\n`;
        message += `üöö *Taxa de entrega:* R$ ${deliveryFee.toFixed(2)}\n\n`;
        
        // Mostra novo total
        const context = this.stateManager.getUserContext(phoneNumber);
        const orderData = context[StateManager.CONTEXT_TYPES.ORDER_DATA];
        message += `üíµ *NOVO TOTAL:* R$ ${orderData.total.toFixed(2)}\n\n`;
        
        message += "‚úÖ Endere√ßo correto?\n\n";
        message += "Digite:\n";
        message += "‚Ä¢ *1* - Confirmar endere√ßo\n";
        message += "‚Ä¢ *2* - Corrigir endere√ßo";

        await this.sendMessage(phoneNumber, message);
    }

    /**
     * Processa sele√ß√£o de pagamento
     */
    async proceedToPaymentSelection(phoneNumber) {
        this.stateManager.updateState(phoneNumber, StateManager.STATES.SELECTING_PAYMENT);

        await this.sendMessage(phoneNumber, 
            "üí≥ *FORMA DE PAGAMENTO*\n\n" +
            "Escolha como deseja pagar:\n\n" +
            "üè¶ *PIX (Aprova√ß√£o instant√¢nea)*\n" +
            "‚Ä¢ *1* - PIX via MercadoPago\n" +
            "‚Ä¢ *2* - PIX via PagSeguro\n" +
            "‚Ä¢ *3* - PIX via PicPay\n\n" +
            "üí≥ *Cart√£o de Cr√©dito/D√©bito*\n" +
            "‚Ä¢ *4* - Cart√£o via MercadoPago\n" +
            "‚Ä¢ *5* - Cart√£o via PagSeguro\n" +
            "‚Ä¢ *6* - Cart√£o via PicPay\n\n" +
            "üí∞ *Outras op√ß√µes*\n" +
            "‚Ä¢ *7* - Dinheiro na entrega\n\n" +
            "Digite o *n√∫mero* da op√ß√£o desejada:"
        );
    }

    /**
     * Manipula sele√ß√£o de pagamento
     */
    async handlePaymentSelection(phoneNumber, message) {
        const option = message.trim();
        const paymentMethods = {
            '1': { type: 'pix', gateway: 'mercadopago', name: 'PIX via MercadoPago' },
            '2': { type: 'pix', gateway: 'pagseguro', name: 'PIX via PagSeguro' },
            '3': { type: 'pix', gateway: 'picpay', name: 'PIX via PicPay' },
            '4': { type: 'card', gateway: 'mercadopago', name: 'Cart√£o via MercadoPago' },
            '5': { type: 'card', gateway: 'pagseguro', name: 'Cart√£o via PagSeguro' },
            '6': { type: 'card', gateway: 'picpay', name: 'Cart√£o via PicPay' },
            '7': { type: 'cash', gateway: 'cash', name: 'Dinheiro na entrega' }
        };

        if (paymentMethods[option]) {
            const selectedMethod = paymentMethods[option];
            
            // Salva m√©todo escolhido
            this.stateManager.updateContext(phoneNumber, {
                [StateManager.CONTEXT_TYPES.PAYMENT_INFO]: selectedMethod
            });

            if (selectedMethod.type === 'cash') {
                await this.processCashPayment(phoneNumber);
            } else {
                await this.processDigitalPayment(phoneNumber, selectedMethod);
            }
        } else {
            await this.handleInvalidOption(phoneNumber, 'payment');
        }
    }

    /**
     * Processa pagamento em dinheiro
     */
    async processCashPayment(phoneNumber) {
        await this.sendMessage(phoneNumber, 
            "üí∞ *PAGAMENTO EM DINHEIRO*\n\n" +
            "Voc√™ escolheu pagar na entrega.\n\n" +
            "üí° *Precisa de troco?*\n\n" +
            "Digite:\n" +
            "‚Ä¢ *1* - N√£o preciso de troco\n" +
            "‚Ä¢ *2* - Preciso de troco para R$ ___\n" +
            "‚Ä¢ Digite o valor para o qual precisa de troco"
        );
    }

    /**
     * Processa pagamento digital
     */
    async processDigitalPayment(phoneNumber, paymentMethod) {
        try {
            this.stateManager.updateState(phoneNumber, StateManager.STATES.WAITING_PAYMENT);

            await this.sendMessage(phoneNumber, 
                `üí≥ *${paymentMethod.name}*\n\n` +
                "‚è≥ Gerando link de pagamento...\n\n" +
                "Aguarde um momento..."
            );

            // Cria pedido no backend
            const order = await this.createOrder(phoneNumber);
            
            if (order && order.id) {
                // Gera link de pagamento
                const paymentLink = await paymentService.generatePaymentLink(
                    order.id, 
                    paymentMethod.gateway, 
                    paymentMethod.type
                );

                if (paymentLink) {
                    await this.sendPaymentLink(phoneNumber, paymentLink, paymentMethod);
                } else {
                    throw new Error('Falha ao gerar link de pagamento');
                }
            } else {
                throw new Error('Falha ao criar pedido');
            }

        } catch (error) {
            console.error('[PAYMENT ERROR]', error);
            await this.sendMessage(phoneNumber, 
                "‚ùå Erro ao processar pagamento.\n\n" +
                "Por favor, tente novamente ou escolha outra forma de pagamento."
            );
            
            // Volta para sele√ß√£o de pagamento
            await this.proceedToPaymentSelection(phoneNumber);
        }
    }

    /**
     * Envia link de pagamento
     */
    async sendPaymentLink(phoneNumber, paymentLink, paymentMethod) {
        let message = `üí≥ *${paymentMethod.name}*\n\n`;
        
        if (paymentMethod.type === 'pix') {
            message += "üì± *Pagamento PIX*\n\n";
            message += "Clique no link abaixo para pagar:\n";
            message += `${paymentLink}\n\n`;
            message += "‚úÖ Ap√≥s o pagamento, seu pedido ser√° confirmado automaticamente!\n\n";
            message += "‚è∞ Link v√°lido por 30 minutos";
        } else {
            message += "üí≥ *Pagamento com Cart√£o*\n\n";
            message += "Clique no link abaixo para inserir os dados do cart√£o:\n";
            message += `${paymentLink}\n\n`;
            message += "üîí Ambiente 100% seguro\n";
            message += "‚úÖ Confirma√ß√£o instant√¢nea";
        }

        await this.sendMessage(phoneNumber, message);

        // Agenda verifica√ß√£o de pagamento
        this.schedulePaymentCheck(phoneNumber);
    }

    /**
     * Agenda verifica√ß√£o peri√≥dica do pagamento
     */
    schedulePaymentCheck(phoneNumber) {
        const checkInterval = setInterval(async () => {
            const currentState = this.stateManager.getUserState(phoneNumber);
            
            if (currentState !== StateManager.STATES.WAITING_PAYMENT) {
                clearInterval(checkInterval);
                return;
            }

            // Verifica status do pagamento
            const context = this.stateManager.getUserContext(phoneNumber);
            const orderData = context[StateManager.CONTEXT_TYPES.ORDER_DATA];
            
            if (orderData && orderData.orderId) {
                const paymentStatus = await this.checkPaymentStatus(orderData.orderId);
                
                if (paymentStatus === 'paid') {
                    clearInterval(checkInterval);
                    await this.confirmOrderPayment(phoneNumber);
                } else if (paymentStatus === 'failed') {
                    clearInterval(checkInterval);
                    await this.handlePaymentFailure(phoneNumber);
                }
            }
        }, 30000); // Verifica a cada 30 segundos

        // Para a verifica√ß√£o ap√≥s 30 minutos
        setTimeout(() => {
            clearInterval(checkInterval);
            
            const currentState = this.stateManager.getUserState(phoneNumber);
            if (currentState === StateManager.STATES.WAITING_PAYMENT) {
                this.handlePaymentTimeout(phoneNumber);
            }
        }, 30 * 60 * 1000);
    }

    /**
     * Confirma pagamento e finaliza pedido
     */
    async confirmOrderPayment(phoneNumber) {
        this.stateManager.updateState(phoneNumber, StateManager.STATES.ORDER_CONFIRMED);

        const context = this.stateManager.getUserContext(phoneNumber);
        const orderData = context[StateManager.CONTEXT_TYPES.ORDER_DATA];
        const personalInfo = context[StateManager.CONTEXT_TYPES.PERSONAL_INFO];

        let message = "üéâ *PEDIDO CONFIRMADO!*\n\n";
        message += `‚úÖ Pagamento aprovado com sucesso!\n`;
        message += `üìã *N√∫mero do pedido:* #${orderData.orderNumber}\n\n`;
        message += `üë§ *Cliente:* ${personalInfo.name}\n`;
        message += `‚è∞ *Tempo estimado:* ${orderData.estimatedTime || '45-60 minutos'}\n\n`;
        message += "üçΩÔ∏è Seu pedido j√° foi enviado para nossa cozinha!\n\n";
        message += "üì± Voc√™ receber√° atualiza√ß√µes do status aqui no WhatsApp.\n\n";
        message += "üíå Enviamos a confirma√ß√£o por e-mail tamb√©m!";

        await this.sendMessage(phoneNumber, message);

        // Agenda pr√≥ximas comunica√ß√µes
        this.scheduleOrderUpdates(phoneNumber, orderData.orderId);
    }

    /**
     * Agenda atualiza√ß√µes do pedido
     */
    scheduleOrderUpdates(phoneNumber, orderId) {
        // Atualiza√ß√£o em 15 minutos
        setTimeout(async () => {
            await this.sendMessage(phoneNumber, 
                "üë®‚Äçüç≥ *Atualiza√ß√£o do pedido*\n\n" +
                "Seu pedido est√° sendo preparado com carinho!\n" +
                "üî• Nossa equipe j√° come√ßou a cozinhar.\n\n" +
                "üì± Digite *status* a qualquer momento para acompanhar."
            );
        }, 15 * 60 * 1000);

        // Atualiza√ß√£o em 30 minutos
        setTimeout(async () => {
            await this.sendMessage(phoneNumber, 
                "üöö *Seu pedido est√° quase pronto!*\n\n" +
                "‚è∞ Estimativa: mais 15-20 minutos\n" +
                "üõµ Nosso entregador j√° est√° se preparando!"
            );
        }, 30 * 60 * 1000);
    }

    // M√©todos auxiliares e de utilidade...

    /**
     * Identifica se a mensagem √© um resumo de pedido do card√°pio
     */
    async isOrderSummaryFromMenu(message) {
        // Verifica padr√µes t√≠picos de resumo de pedido
        const patterns = [
            /resumo.*pedido/i,
            /üõí.*total/i,
            /itens.*selecionados/i,
            /quantidade.*\d+/i,
            /subtotal.*r\$/i
        ];

        return patterns.some(pattern => pattern.test(message));
    }

    /**
     * Extrai dados do pedido do resumo enviado
     */
    async parseOrderSummary(orderSummary) {
        try {
            // Implementa parsing inteligente do resumo
            // Este m√©todo deve ser adaptado conforme o formato espec√≠fico
            // que o card√°pio digital envia
            
            const data = {
                items: [],
                subtotal: 0,
                deliveryFee: 0,
                total: 0,
                timestamp: new Date()
            };

            // Aqui voc√™ implementaria a l√≥gica espec√≠fica para extrair
            // os dados do formato que seu card√°pio digital envia
            
            return data;
        } catch (error) {
            console.error('[PARSE ORDER ERROR]', error);
            return null;
        }
    }

    /**
     * Envia mensagem via WhatsApp
     */
    async sendMessage(phoneNumber, message) {
        try {
            await this.whatsapp.sendMessage(phoneNumber, message);
        } catch (error) {
            console.error('[SEND MESSAGE ERROR]', error);
        }
    }

    /**
     * Mostra menu de ajuda
     */
    async showHelpMenu(phoneNumber) {
        const helpMessage = 
            "ü§ñ *CENTRAL DE AJUDA*\n\n" +
            "Comandos dispon√≠veis:\n\n" +
            "üìã *menu* - Ver card√°pio\n" +
            "üì¶ *status* - Status do pedido\n" +
            "üë®‚Äçüíº *atendente* - Falar com humano\n" +
            "‚ùå *cancelar* - Cancelar opera√ß√£o\n\n" +
            "üí¨ Ou digite sua d√∫vida que eu tento ajudar!";

        await this.sendMessage(phoneNumber, helpMessage);
    }

    /**
     * Transfere para suporte humano
     */
    async transferToSupport(phoneNumber, reason = null) {
        this.stateManager.updateState(phoneNumber, StateManager.STATES.CUSTOMER_SUPPORT);
        
        let message = "üë®‚Äçüíº *TRANSFERINDO PARA ATENDENTE*\n\n";
        if (reason) {
            message += `Motivo: ${reason}\n\n`;
        }
        message += "Um de nossos atendentes ir√° responder em breve.\n\n";
        message += "üïê Hor√°rio de atendimento:\n";
        message += "Segunda a Sexta: 8h √†s 18h\n";
        message += "S√°bados: 8h √†s 14h";

        await this.sendMessage(phoneNumber, message);
        
        // Notifica equipe de suporte (implementar conforme necess√°rio)
        await this.notifySupport(phoneNumber, reason);
    }
}

module.exports = AdvancedOrderFlow;
